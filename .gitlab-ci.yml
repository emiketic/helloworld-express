stages:
  - prepare
  - lint
  - test
  - build
  - deploy

image: node:10

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./node_modules/

install:
  stage: prepare
  tags:
    - docker
  script:
    - npm install --unsafe-perm

lint:critical:
  stage: lint
  tags:
    - docker
  script:
    - npm run lint:critical

lint:
  stage: lint
  tags:
    - docker
  script:
    - npm run lint
  allow_failure: true

test:unit:
  stage: test
  tags:
    - docker
  services:
    - name: mongo:4.0
      alias: mongo
    - name: redis:5.0
      alias: redis
  script:
    - export MONGODB_URI=mongodb://mongo:27017/Test
    - export REDIS_STORAGE_URI=redis://redis:6379/10
    - export REDIS_CACHE_URI=redis://redis:6379/11
    - export REDIS_JOB_URI=redis://redis:6379/12
    - npm run test:unit

test:integration:
  stage: test
  tags:
    - docker
  services:
    - name: mongo:4.0
      alias: mongo
    - name: redis:5.0
      alias: redis
  script:
    - export MONGODB_URI=mongodb://mongo:27017/Test
    - export REDIS_STORAGE_URI=redis://redis:6379/10
    - export REDIS_CACHE_URI=redis://redis:6379/11
    - export REDIS_JOB_URI=redis://redis:6379/12
    - npm run test:integration

build:
  image: gitlab/dind
  services:
  - docker:dind
  stage: build
  only:
    - wip
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  script:
    - docker version
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME

deploy:
  stage: deploy
  dependencies:
    - build
  tags:
    - docker
  image: emiketic/essentials
  only:
    - wip
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh ; chmod 700 ~/.ssh
    - ssh-keyscan ${DEPLOY_SSH_TARGET#*@} > ~/.ssh/known_hosts ; chmod 644 ~/.ssh/known_hosts
    - ssh "${DEPLOY_SSH_TARGET}" "cd /app/helloworld-express/ && docker-compose pull && docker-compose up -d && exit"
